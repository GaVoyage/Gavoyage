<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.gavoyage.user.mapper.UserMapper">

	<resultMap type="Users" id="user">
		<result column="userIdx" property="userIdx"/>
		<result column="email" property="email"/>
		<result column="nickname" property="nickname"/>
		<result column="userPassword" property="userPassword"/>
		<result column="userImageUrl" property="userImageUrl"/>
		<result column="phoneNumber" property="phoneNumber"/>
		<result column="userRole" property="userRole"/>
		<result column="status" property="status"/>
		<result column="createdAt" property="createdAt"/>
		<result column="modifiedAt" property="modifiedAt"/>
	</resultMap>

	<select id="login" parameterType="userLoginReq" resultMap="user">
		select *
		from user
		where email=#{email} and userPassword=#{userPassword}
	</select>
	
	<select id="emailCheck" parameterType="String" resultType="int">
		select count(email)
		from user
		where email = #{email}
	</select>
	
	<select id="findByUserIdx" parameterType="Long" resultMap="user">
		select *
		from user
		where userIdx = #{userIdx}
	</select>
	
	<select id="findByUserEmail" parameterType="String" resultMap="user">
		select *
		from user
		where email = #{email}
	</select>
	
	<select id="findBySocialIdAndSocialType" parameterType="String" resultMap="user">
		select *
		from user
		where socialId = #{socialId} and socialType = #{socialType}
	</select>
	
	<select id="findByRefreshToken" parameterType="String" resultMap="user">
		select *
		from user
		where refreshToken = #{refreshToken}
	</select>
	
	
	<select id="findUserIdxByEmail" parameterType="String" resultType="Long">
		select userIdx from user where email = #{email}
	</select>
	
	<select id="findAll" resultMap="user">
		select *
		from user
		where status = 'Y'
		order by createdAt
	</select>
	
	<insert id="join" parameterType="userJoinReq">
		insert into 
		user(email, nickname, userPassword, phoneNumber) 
		values (#{email}, #{nickname}, #{userPassword}, #{phoneNumber});
	</insert>
	
	<insert id="socialJoin" parameterType="socialJoinDto">
		insert into user(socialType, socialId, nickname, email, userPassword, phoneNumber)
		value(#{socialType}, #{socialId}, #{nickname}, #{email}, #{userPassword}, #{phoneNumber});
		
		<selectKey resultType="long" keyProperty="userIdx" order="AFTER">
            select last_insert_id()
        </selectKey>
	</insert>
	
	<update id="deleteUser" parameterType="long">
		update user set status = 'N' where userIdx = #{userIdx}
	</update>
	
	<update id="updateRefreshToken" parameterType="String">
		update user set refreshToken = #{refreshToken} where email = #{email};
	</update>
	
	<select id="findUserNameByReviewIdx" parameterType="Long" resultType="String">
		select u.nickname from review r, user u where r.userIdx = u.userIdx and r.reviewIdx = #{reviewIdx};
	</select>
	
</mapper>